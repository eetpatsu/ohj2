package punttisalimuistio.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import punttisalimuistio.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.06.27 17:27:25 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class LiikeTest {



  // Generated by ComTest BEGIN
  /** testGetTunnusNro54 */
  @Test
  public void testGetTunnusNro54() {    // Liike: 54
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 56", 0, lii1.getTunnusNro()); 
    lii1.rekisteroi(); 
    int n1 = lii1.getTunnusNro(); 
    assertEquals("From: Liike line: 59", true, n1 > 0 && n1+1 == lii1.getSeuraavaNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetSeuraavaNro71 */
  @Test
  public void testGetSeuraavaNro71() {    // Liike: 71
    Liike lii1 = new Liike(); 
    lii1.rekisteroi(); 
    assertEquals("From: Liike line: 74", true, lii1.getSeuraavaNro() == 1 + lii1.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTreeniNro86 */
  @Test
  public void testGetTreeniNro86() {    // Liike: 86
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 88", 0, lii1.getTreeniNro()); 
    lii1.parse("1|1|penkkipunnerrus|60|3|5"); 
    assertEquals("From: Liike line: 90", 1, lii1.getTreeniNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetNimi102 */
  @Test
  public void testGetNimi102() {    // Liike: 102
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 104", "", lii1.getNimi()); 
    lii1.taytaLiike(1); 
    assertEquals("From: Liike line: 106", "penkkipunnerrus", lii1.getNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAseta174 */
  @Test
  public void testAseta174() {    // Liike: 174
    Liike lii = new Liike(); 
    assertEquals("From: Liike line: 176", null, lii.aseta(0, "a 1 b 2 c ? defg h")); 
    assertEquals("From: Liike line: 177", null, lii.aseta(0, "penkkipunnerrus")); 
    assertEquals("From: Liike line: 178", "penkkipunnerrus", lii.getNimi()); 
    assertEquals("From: Liike line: 179", "anna paino muodossa 0.0", lii.aseta(1, "50kg")); 
    assertEquals("From: Liike line: 180", "anna paino muodossa 0.0", lii.aseta(1, "50")); 
    assertEquals("From: Liike line: 181", "anna paino muodossa 0.0", lii.aseta(1, "5a.0")); 
    assertEquals("From: Liike line: 182", null, lii.aseta(1, "5.0")); 
    assertEquals("From: Liike line: 183", null, lii.aseta(1, "50.0")); 
    assertEquals("From: Liike line: 184", null, lii.aseta(1, "500.0")); 
    assertEquals("From: Liike line: 185", "kiellettyjä merkkejä", lii.aseta(2, "kolme")); 
    assertEquals("From: Liike line: 186", null, lii.aseta(2, "3")); 
    assertEquals("From: Liike line: 187", "kiellettyjä merkkejä", lii.aseta(3, "-1")); 
    assertEquals("From: Liike line: 188", null, lii.aseta(3, "12")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testTaytaLiike221 */
  @Test
  public void testTaytaLiike221() {    // Liike: 221
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 223", 0, lii1.getTreeniNro()); 
    lii1.taytaLiike(1); 
    assertEquals("From: Liike line: 225", 1, lii1.getTreeniNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi259 */
  @Test
  public void testRekisteroi259() {    // Liike: 259
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 261", 0, lii1.getTunnusNro()); 
    lii1.rekisteroi(); 
    int n1 = lii1.getTunnusNro(); 
    assertEquals("From: Liike line: 264", true, n1 > 0 && n1+1 == lii1.getSeuraavaNro()); 
    Liike lii2 = new Liike(); 
    assertEquals("From: Liike line: 266", 0, lii2.getTunnusNro()); 
    lii2.rekisteroi(); 
    int n2 = lii2.getTunnusNro(); 
    assertEquals("From: Liike line: 269", true, n2 > 0 && n2+1 == lii2.getSeuraavaNro()); 
    assertEquals("From: Liike line: 270", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone284 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone284() throws CloneNotSupportedException {    // Liike: 284
    Liike lii = new Liike(); 
    lii.parse("7|3|pystypunnerrus|40|3|6"); 
    Liike klooni = lii.clone(); 
    assertEquals("From: Liike line: 289", true, lii.toString().equals(klooni.toString())); 
    lii.parse("1|1|penkkipunnerrus|60|3|5"); 
    assertEquals("From: Liike line: 291", false, lii.toString().equals(klooni.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString304 */
  @Test
  public void testToString304() {    // Liike: 304
    Liike lii1 = new Liike(); 
    lii1.parse("1|1|penkkipunnerrus|60.0|3|5"); 
    assertEquals("From: Liike line: 307", true, lii1.toString().startsWith("1|1|penkkipunnerrus|60.0|"));  // on yli 4 kenttää, siksi loppuu tolppaan
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse327 */
  @Test
  public void testParse327() {    // Liike: 327
    Liike lii1 = new Liike(); 
    lii1.parse("1|1|penkkipunnerrus|60.0|3|5"); 
    assertEquals("From: Liike line: 330", 1, lii1.getTunnusNro()); 
    assertEquals("From: Liike line: 331", 1, lii1.getTreeniNro()); 
    assertEquals("From: Liike line: 332", true, lii1.toString().startsWith("1|1|penkkipunnerrus|60.0|"));  // on yli 4 kenttää, siksi loppu |
    lii1.rekisteroi(); 
    int n = lii1.getTunnusNro(); 
    lii1.parse(""+(n+20));  // Otetaan merkkijonosta vain tunnusnumero
    lii1.rekisteroi();  // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
    assertEquals("From: Liike line: 337", n+20+1, lii1.getTunnusNro()); 
  } // Generated by ComTest END
}
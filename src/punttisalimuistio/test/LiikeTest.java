package punttisalimuistio.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import punttisalimuistio.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.06.19 15:50:22 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class LiikeTest {



  // Generated by ComTest BEGIN
  /** testGetTunnusNro53 */
  @Test
  public void testGetTunnusNro53() {    // Liike: 53
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 55", 0, lii1.getTunnusNro()); 
    lii1.rekisteroi(); 
    int n1 = lii1.getTunnusNro(); 
    assertEquals("From: Liike line: 58", true, n1 > 0 && n1+1 == lii1.getSeuraavaNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetSeuraavaNro70 */
  @Test
  public void testGetSeuraavaNro70() {    // Liike: 70
    Liike lii1 = new Liike(); 
    lii1.rekisteroi(); 
    assertEquals("From: Liike line: 73", true, lii1.getSeuraavaNro() == 1 + lii1.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTreeniNro85 */
  @Test
  public void testGetTreeniNro85() {    // Liike: 85
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 87", 0, lii1.getTreeniNro()); 
    lii1.parse("1|1|penkkipunnerrus|60|3|5"); 
    assertEquals("From: Liike line: 89", 1, lii1.getTreeniNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testTaytaLiike114 */
  @Test
  public void testTaytaLiike114() {    // Liike: 114
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 116", 0, lii1.getTreeniNro()); 
    lii1.taytaLiike(1); 
    assertEquals("From: Liike line: 118", 1, lii1.getTreeniNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi154 */
  @Test
  public void testRekisteroi154() {    // Liike: 154
    Liike lii1 = new Liike(); 
    assertEquals("From: Liike line: 156", 0, lii1.getTunnusNro()); 
    lii1.rekisteroi(); 
    int n1 = lii1.getTunnusNro(); 
    assertEquals("From: Liike line: 159", true, n1 > 0 && n1+1 == lii1.getSeuraavaNro()); 
    Liike lii2 = new Liike(); 
    assertEquals("From: Liike line: 161", 0, lii2.getTunnusNro()); 
    lii2.rekisteroi(); 
    int n2 = lii2.getTunnusNro(); 
    assertEquals("From: Liike line: 164", true, n2 > 0 && n2+1 == lii2.getSeuraavaNro()); 
    assertEquals("From: Liike line: 165", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString179 */
  @Test
  public void testToString179() {    // Liike: 179
    Liike lii1 = new Liike(); 
    lii1.parse("1|1|penkkipunnerrus|60|3|5"); 
    assertEquals("From: Liike line: 182", true, lii1.toString().startsWith("1|1|penkkipunnerrus|60|"));  // on yli 4 kenttää, siksi loppuu tolppaan
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse202 */
  @Test
  public void testParse202() {    // Liike: 202
    Liike lii1 = new Liike(); 
    lii1.parse("1|1|penkkipunnerrus|60|3|5"); 
    assertEquals("From: Liike line: 205", 1, lii1.getTunnusNro()); 
    assertEquals("From: Liike line: 206", 1, lii1.getTreeniNro()); 
    assertEquals("From: Liike line: 207", true, lii1.toString().startsWith("1|1|penkkipunnerrus|60|"));  // on yli 4 kenttää, siksi loppu |
    lii1.rekisteroi(); 
    int n = lii1.getTunnusNro(); 
    lii1.parse(""+(n+20));  // Otetaan merkkijonosta vain tunnusnumero
    lii1.rekisteroi();  // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
    assertEquals("From: Liike line: 212", n+20+1, lii1.getTunnusNro()); 
  } // Generated by ComTest END
}
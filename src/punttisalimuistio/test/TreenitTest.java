package punttisalimuistio.test;
// Generated by ComTest BEGIN
import java.io.File;
import punttisalimuistio.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.06.28 20:15:15 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TreenitTest {



  // Generated by ComTest BEGIN
  /** testLisaa53 */
  @Test
  public void testLisaa53() {    // Treenit: 53
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(); 
    Treeni tre2 = new Treeni(); 
    assertEquals("From: Treenit line: 57", 0, treenit.getLkm()); 
    treenit.lisaa(tre1); assertEquals("From: Treenit line: 58", 1, treenit.getLkm()); 
    treenit.lisaa(tre2); assertEquals("From: Treenit line: 59", 2, treenit.getLkm()); 
    treenit.lisaa(tre1); assertEquals("From: Treenit line: 60", 3, treenit.getLkm()); 
    assertEquals("From: Treenit line: 61", tre1, treenit.anna(0)); 
    assertEquals("From: Treenit line: 62", tre2, treenit.anna(1)); 
    assertEquals("From: Treenit line: 63", tre1, treenit.anna(2)); 
    assertEquals("From: Treenit line: 64", false, treenit.anna(1) == tre1); 
    assertEquals("From: Treenit line: 65", true, treenit.anna(1) == tre2); 
    try {
    assertEquals("From: Treenit line: 66", tre1, treenit.anna(3)); 
    fail("Treenit: 66 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    treenit.lisaa(tre1); assertEquals("From: Treenit line: 67", 4, treenit.getLkm()); 
    treenit.lisaa(tre1); assertEquals("From: Treenit line: 68", 5, treenit.getLkm()); 
    treenit.lisaa(tre1); treenit.lisaa(tre2); 
    treenit.lisaa(tre1); treenit.lisaa(tre2); 
    treenit.lisaa(tre1); treenit.lisaa(tre2); 
    treenit.lisaa(tre1); 
    assertEquals("From: Treenit line: 73", 12, treenit.getLkm()); 
    treenit.lisaa(tre1); 
    assertEquals("From: Treenit line: 75", 13, treenit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa91 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa91() throws CloneNotSupportedException {    // Treenit: 91
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(); 
    tre1.rekisteroi(); 
    tre1.taytaTreeni(); 
    treenit.lisaa(tre1); 
    Treeni tre2 = new Treeni(); 
    tre2.rekisteroi(); 
    tre2.taytaTreeni(); 
    treenit.lisaa(tre2); 
    treenit.korvaaTaiLisaa(tre1); 
    treenit.korvaaTaiLisaa(tre2); 
    assertEquals("From: Treenit line: 105", 2, treenit.getLkm()); 
    Treeni klooni = tre1.clone(); 
    assertEquals("From: Treenit line: 107", true, tre1.toString().equals(klooni.toString())); 
    treenit.korvaaTaiLisaa(klooni); 
    assertEquals("From: Treenit line: 109", 2, treenit.getLkm()); 
    tre1.parse("1|09.06.2023|kotikuntosali|60|5|-"); 
    assertEquals("From: Treenit line: 111", false, tre1.toString().equals(klooni.toString())); 
    treenit.korvaaTaiLisaa(tre1); 
    assertEquals("From: Treenit line: 113", 3, treenit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnna135 
   * @throws SailoException when error
   */
  @Test
  public void testAnna135() throws SailoException {    // Treenit: 135
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(); 
    Treeni tre2 = new Treeni(); 
    assertEquals("From: Treenit line: 140", 0, treenit.getLkm()); 
    treenit.lisaa(tre1); assertEquals("From: Treenit line: 141", 1, treenit.getLkm()); 
    treenit.lisaa(tre2); assertEquals("From: Treenit line: 142", 2, treenit.getLkm()); 
    treenit.lisaa(tre1); assertEquals("From: Treenit line: 143", 3, treenit.getLkm()); 
    assertEquals("From: Treenit line: 144", tre1, treenit.anna(0)); 
    assertEquals("From: Treenit line: 145", tre2, treenit.anna(1)); 
    assertEquals("From: Treenit line: 146", tre1, treenit.anna(2)); 
    assertEquals("From: Treenit line: 147", false, treenit.anna(1) == tre1); 
    assertEquals("From: Treenit line: 148", true, treenit.anna(1) == tre2); 
    try {
    assertEquals("From: Treenit line: 149", tre1, treenit.anna(3)); 
    fail("Treenit: 149 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista164 */
  @Test
  public void testPoista164() {    // Treenit: 164
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(), tre2 = new Treeni(), tre3 = new Treeni(); 
    tre1.rekisteroi(); tre2.rekisteroi(); tre3.rekisteroi(); 
    int nro = tre1.getTunnusNro(); 
    treenit.lisaa(tre1); treenit.lisaa(tre2); treenit.lisaa(tre3); 
    assertEquals("From: Treenit line: 170", 3, treenit.getLkm()); 
    assertEquals("From: Treenit line: 171", 1, treenit.poista(nro)); 
    assertEquals("From: Treenit line: 172", 2, treenit.getLkm()); 
    assertEquals("From: Treenit line: 173", 1, treenit.poista(nro+1)); assertEquals("From: Treenit line: 173", 1, treenit.getLkm()); 
    assertEquals("From: Treenit line: 174", 0, treenit.poista(nro+3)); assertEquals("From: Treenit line: 174", 1, treenit.getLkm()); 
    assertEquals("From: Treenit line: 175", 1, treenit.poista(nro+2)); assertEquals("From: Treenit line: 175", 0, treenit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta196 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta196() throws SailoException {    // Treenit: 196
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(); tre1.taytaTreeni(); 
    Treeni tre2 = new Treeni(); tre2.taytaTreeni(); 
    Treeni tre3 = new Treeni(); tre3.taytaTreeni(); 
    String nimi = "testi"; 
    File tiedosto = new File(nimi + "/treenit.dat"); 
    File dir = new File(nimi); 
    dir.mkdir(); 
    tiedosto.delete(); 
    try {
    treenit.lueTiedostosta(nimi); 
    fail("Treenit: 208 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    treenit.lisaa(tre1); 
    treenit.lisaa(tre2); 
    treenit.lisaa(tre3); 
    treenit.talleta(nimi); 
    treenit = new Treenit(); 
    treenit.lueTiedostosta(nimi); 
    Iterator<Treeni> i = treenit.iterator(); 
    assertEquals("From: Treenit line: 216", tre1.toString(), i.next().toString()); 
    assertEquals("From: Treenit line: 217", tre2.toString(), i.next().toString()); 
    assertEquals("From: Treenit line: 218", tre3.toString(), i.next().toString()); 
    treenit = new Treenit(); 
    i = treenit.iterator(); 
    assertEquals("From: Treenit line: 221", false, i.hasNext()); 
    treenit.lueTiedostosta(nimi); 
    treenit.lisaa(tre3); 
    treenit.talleta(nimi); 
    assertEquals("From: Treenit line: 225", true, tiedosto.delete()); 
    assertEquals("From: Treenit line: 226", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTalleta260 
   * @throws SailoException when error
   */
  @Test
  public void testTalleta260() throws SailoException {    // Treenit: 260
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(); tre1.taytaTreeni(); 
    String nimi = "testi"; 
    File tiedosto = new File(nimi + "/treenit.dat"); 
    File dir = new File(nimi); 
    dir.mkdir(); 
    tiedosto.delete(); 
    try {
    treenit.lueTiedostosta(nimi); 
    fail("Treenit: 270 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    treenit.lisaa(tre1); 
    treenit.talleta(nimi); 
    treenit = new Treenit(); 
    treenit.lueTiedostosta(nimi); 
    Iterator<Treeni> i = treenit.iterator(); 
    assertEquals("From: Treenit line: 276", tre1.toString(), i.next().toString()); 
    treenit = new Treenit(); 
    i = treenit.iterator(); 
    assertEquals("From: Treenit line: 279", false, i.hasNext()); 
    treenit.lueTiedostosta(nimi); 
    treenit.lisaa(tre1); 
    treenit.talleta(nimi); 
    assertEquals("From: Treenit line: 283", true, tiedosto.delete()); 
    assertEquals("From: Treenit line: 284", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiIndeksi334 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiIndeksi334() throws SailoException {    // Treenit: 334
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(), tre2 = new Treeni(), tre3 = new Treeni(); 
    tre1.rekisteroi(); tre2.rekisteroi(); tre3.rekisteroi(); 
    int nro = tre1.getTunnusNro(); 
    treenit.lisaa(tre1); treenit.lisaa(tre2); treenit.lisaa(tre3); 
    assertEquals("From: Treenit line: 341", 1, treenit.etsiIndeksi(nro+1)); 
    assertEquals("From: Treenit line: 342", 2, treenit.etsiIndeksi(nro+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTreenitIterator381 
   * @throws SailoException when error
   */
  @Test
  public void testTreenitIterator381() throws SailoException {    // Treenit: 381
    Treenit treenit = new Treenit(); 
    Treeni tre1 = new Treeni(), tre2 = new Treeni(); 
    tre1.rekisteroi(); tre2.rekisteroi(); 
    treenit.lisaa(tre1); 
    treenit.lisaa(tre2); 
    treenit.lisaa(tre1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Treeni treeni:treenit) {
    ids.append(" "+treeni.getTunnusNro()); 
    }
    String tulos = " " + tre1.getTunnusNro() + " " + tre2.getTunnusNro() + " " + tre1.getTunnusNro(); 
    assertEquals("From: Treenit line: 396", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Treeni> i = treenit.iterator(); i.hasNext(); ) {
    Treeni treeni = i.next(); 
    ids.append(" "+treeni.getTunnusNro()); 
    }
    assertEquals("From: Treenit line: 402", tulos, ids.toString()); 
    Iterator<Treeni>  i=treenit.iterator(); 
    assertEquals("From: Treenit line: 404", true, i.next() == tre1); 
    assertEquals("From: Treenit line: 405", true, i.next() == tre2); 
    assertEquals("From: Treenit line: 406", true, i.next() == tre1); 
    try {
    i.next(); 
    fail("Treenit: 407 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}